#include <SPI.h>

#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

// #include <DHT.h>

#include "pins_arduino.h"

// #define DHTTYPE DHT22
// DHT Sensor
// PIN mit dem "Data" des DHT22 verbunden ist
// uint8_t DHTPin = D2;
// uint8_t DHTPin = D4; // = input labeled "D2"

int8_t pin_SS = PIN_SPI_SS;     // GPIO15, D8
int8_t pin_SCK = PIN_SPI_SCK;   // GPIO14, D5
int8_t pin_MOSI = PIN_SPI_MOSI; // GPIO13, D7
int8_t pin_MISO = PIN_SPI_MISO; // GPIO12, D6

int8_t pin_inv_SS = D4; // GPIO4 D2

// Initialize DHT sensor.
// DHT dht(DHTPin, DHTTYPE);

// float Temperature;
// float Humidity;

// Zugangsdaten zum WLAN:
const char *ssid = "nEsk35421Sg";
const char *password = "GRrfglfssWfserxd2gtsat5sfcx";
// const char* ssid = "feelsLikeHome";
// const char* password = "4Fri3nds0u";
ESP8266WebServer server(80);

uint32_t c_frequencyTests[] = {4000000L, 6000000L, 8000000L, 12000000L, 16000000L, 20000000L};

unsigned char readCommand[] = {
    0x06, 0x0C, 0x00, 0xFA, 0x08, 0xFF,
    0x03,
    0x00, 0x00,
    0x00, 0x01,
    0x91, 0xD4,
    0x55
};

unsigned char readCommand_inv[] = {
    0xF9, 0xF3, 0xFF, 0x05, 0xF7, 0x00,
    0xFC,
    0xFF, 0xFF,
    0xFF, 0xFE,
    0x6E, 0x2B,
    0xAA
};

void InitSPI()
{

    pinMode(pin_SS, OUTPUT);
    pinMode(pin_inv_SS, OUTPUT);

    digitalWrite(pin_SS, HIGH);
    digitalWrite(pin_inv_SS, LOW);

    // sck, int8_t miso, int8_t mosi, int8_t ss
    // SPI.pins(pin_SCK, pin_MISO, pin_MOSI, pin_SS);
    SPI.begin();
    delay(1000);
}


// https://github.com/esp8266/Arduino/issues/5672
void setup()
{

    Serial.begin(115200);
    // Serial.setDebugOutput(true);
    while (!Serial)
        ; // wait for serial attach

    // delay(100);

    Serial.println();
    Serial.println("Initializing...");
    Serial.flush();

    InitSPI();

    // initSPIslave();

    /*

  delay(10000);

  pinMode(DHTPin, INPUT);

  dht.begin();              


  int numberOfNetworks = WiFi.scanNetworks();
 
  for(int i =0; i<numberOfNetworks; i++){
 
      Serial.print("Network name: ");
      Serial.println(WiFi.SSID(i));
      Serial.print("Signal strength: ");
      Serial.println(WiFi.RSSI(i));
      Serial.println("-----------------------");
 
  }

  Serial.println("Connecting to ");
  Serial.println(ssid);

  //connect to your local wi-fi network
  WiFi.begin(ssid, password);

  //check wi-fi is connected to wi-fi network
  while (WiFi.status() != WL_CONNECTED) {
  delay(1000);
  Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected..!");
  Serial.print("Got IP: ");  Serial.println(WiFi.localIP());

  server.on("/", handle_OnConnect);
  server.onNotFound(handle_NotFound);

  server.begin();
  Serial.println("HTTP server started");
  */
}

// https://stackoverflow.com/questions/37538/how-do-i-determine-the-size-of-my-array-in-c
// An array sent as a parameter to a function is treated as a pointer, so sizeof will return the pointer's size, instead of the array's.
// Thus, inside functions this method does not work. Instead, always pass an additional parameter size_t size indicating the number of elements in the array.
void spi_command(unsigned char command[], size_t commandSize, uint32_t clock, uint8_t mode)
{

    Serial.printf("Process command with %d bytes\n", commandSize);

    // take the chip select low to select the device:

    // 4000000L, 6000000L, 8000000L, 12000000L, 16000000L, 20000000L
    // SPI.beginTransaction(SPISettings(4000000L, MSBFIRST, SPI_MODE0));
    SPI.beginTransaction(SPISettings(clock, MSBFIRST, mode));

    digitalWrite(pin_SS, LOW);
    digitalWrite(pin_inv_SS, HIGH);

    // SPI.writeBytes(command, commandSize);

    /*
  unsigned char * resultFull;
  SPI.transferBytes(command, resultFull, commandSize);
  
  Serial.print("--- read result 1 ---\n");

  for (int i = 0; i < sizeof(resultFull); i++) {
    Serial.printf("MOSI: %02x, MISO: %02x\n", resultFull[i], 0x00);
  }

  Serial.print("--- done read result 1 ---\n");
*/

    // SPI.transfer(command, commandSize);

    for (int i = 0; i < commandSize; i++)
    {
        byte result = SPI.transfer(command[i]);
        Serial.printf("MOSI: %02x, MISO: %02x\n", command[i], result);
    }
    Serial.print("--- read result ---\n");

    digitalWrite(pin_SS, HIGH);
    // delay(30);
    // digitalWrite(pin_SS, LOW);

    int readBytes = 0;
    while (1)
    {
        byte result = SPI.transfer(0xFF);

        // if (result != 0x00) {
        Serial.printf("MOSI: %02x, MISO: %02x\n", 0xFF, result);
        // }

        readBytes++;

        if (result == 0x55 || readBytes > 100)
        {
            break;
        }
    }
    // digitalWrite(pin_SS, HIGH);
    digitalWrite(pin_inv_SS, LOW);
    SPI.endTransaction();
}

void loop()
{

    delay(10000);
    // digitalWrite(pin_SS, HIGH);

    Serial.printf("--- %d --- SPI_MODE2 --- not_inv\n", 50000UL);
    spi_command(readCommand, sizeof(readCommand), 63000UL, SPI_MODE2);

    delay(500);
    Serial.printf("--- %d --- SPI_MODE2 --- inv\n", 50000); // ESP8266_CLOCK
    spi_command(readCommand_inv, sizeof(readCommand_inv), 36000UL, SPI_MODE2);

    /*
  spi_command_slave_to_master(readCommand, sizeof(readCommand));
  delay(1000);
  spi_command_slave_to_master(readCommand_inv, sizeof(readCommand));
  */

    /*
  server.handleClient();
  

  Temperature = dht.readTemperature(); // Gets the values of the temperature
  Humidity = dht.readHumidity(); // Gets the values of the humidity 
  Serial.print("Temperature: ");
  Serial.print(Temperature);
  Serial.print("Humidity: ");
  Serial.print(Humidity);
  Serial.print("\n");
  */
}

void handle_OnConnect()
{

    // Temperature = dht.readTemperature(); // Gets the values of the temperature
    // Humidity = dht.readHumidity(); // Gets the values of the humidity
    // server.send(200, "text/html", SendHTML(Temperature,Humidity));
    server.send(200, "text/html", SendHTML(-1, -1));
}

void handle_NotFound()
{
    server.send(404, "text/plain", "Not found");
}

String SendHTML(float Temperaturestat, float Humiditystat)
{
    String ptr = "<!DOCTYPE html> <html>\n";
    ptr += "<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n";
    ptr += "<title>ESP8266 Weather Report</title>\n";
    ptr += "<meta http-equiv=\"refresh\" content=\"2\" >";
    ptr += "<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}\n";
    ptr += "body{margin-top: 50px;} h1 {color: #444444;margin: 50px auto 30px;}\n";
    ptr += "p {font-size: 24px;color: #444444;margin-bottom: 10px;}\n";
    ptr += "</style>\n";
    ptr += "</head>\n";
    ptr += "<body>\n";
    ptr += "<div id=\"webpage\">\n";
    ptr += "<h1>ESP8266 NodeMCU Weather Report</h1>\n";

    ptr += "<p>Temperature: ";
    ptr += (int)Temperaturestat;
    ptr += " C</p>";
    ptr += "<p>Humidity: ";
    ptr += (int)Humiditystat;
    ptr += " %</p>";

    ptr += "</div>\n";
    ptr += "</body>\n";
    ptr += "</html>\n";
    return ptr;
}